jacoco {
    toolVersion = "0.8.12"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport
}

tasks.named('jacocoTestReport', JacocoReport) {
    dependsOn(tasks.test)

    def mainClasses = files(sourceSets.main.output).asFileTree.matching {
        exclude(
                "**/generated/**",
                "**/build/**",
                "**/*Application*",
                "**/*Config*",
                "**/*Dto*",
                "**/*Request*",
                "**/*Response*",
                "**/generated/querydsl/**",
                "**/Q*.*"
        )
    }

    additionalSourceDirs.from files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom(mainClasses)
    executionData.from fileTree(project.rootDir) {
        include "**/build/jacoco/*.exec"
    }

    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }
}

tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    dependsOn(tasks.test)

    classDirectories.setFrom(
            files(sourceSets.main.output).asFileTree.matching {
                exclude(
                        "**/generated/**",
                        "**/build/**",
                        "**/*Application*",
                        "**/*Config*",
                        "**/*Dto*",
                        "**/*Request*",
                        "**/*Response*",
                        "**/generated/querydsl/**",
                        "**/Q*.*"
                )
            }
    )

    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('jacocoTestCoverageVerification')
}